<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.kr.myportfolio.mapper.PortfolioMapper">

    <!--포트폴리오 저장-->
    <insert id="insertPortfolio" parameterType="Portfolio" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO Portfolio (user_pid, user_nickname, thumbnail, title, content, created_at, updated_at)
        VALUES (#{userPid}, #{userNickname}, #{thumbnail}, #{title}, #{content}, NOW(), NOW());
    </insert>

    <!-- 포트폴리오 수정 -->
    <update id="updatePortfolio" parameterType="Portfolio">
        UPDATE Portfolio
        SET user_nickname = #{userNickname},
            thumbnail = #{thumbnail},
            title = #{title},
            content = #{content},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!--테그 저장-->
    <insert id="insertTags" parameterType="map">
        INSERT INTO Portfolio_Tags (portfolio_id, tag)
        VALUES
        <foreach collection="tags" item="tag" separator=",">
            (#{portfolioId}, #{tag})
        </foreach>
    </insert>

    <!-- 기존 태그 삭제 -->
    <delete id="deleteTags" parameterType="int">
        DELETE FROM Portfolio_Tags
        WHERE portfolio_id = #{portfolioId}
    </delete>

    <!--포트폴리오 및 테그 반환을 위한 매핑-->
    <resultMap id="PortfolioResultMap" type="PortfolioResponseDTO">
        <!-- DTO 자체의 ID 지정 (중복 판단 기준) -->
        <id property="id" column="portfolio_id"/>

        <!-- 좋아요 여부 -->
        <result property="is_like" column="is_like"/>

        <!-- 포트폴리오 객체 매핑 -->
        <association property="portfolio" javaType="Portfolio">
            <id property="id" column="id"/>
            <result property="userPid" column="user_pid"/>
            <result property="likeCount" column="like_count"/>
            <result property="userNickname" column="user_nickname"/>
            <result property="thumbnail" column="thumbnail"/>
            <result property="title" column="title"/>
            <result property="content" column="content"/>
            <result property="createdAt" column="created_at"/>
            <result property="updatedAt" column="updated_at"/>
        </association>

        <!-- 태그 리스트 매핑 -->
        <collection property="tags" ofType="String">
            <result column="tag"/>
        </collection>
    </resultMap>

    <!--특정 포트폴리오 및 테그 반환-->
    <select id="getPortfolioAndTag" resultMap="PortfolioResultMap">
        SELECT p.id                                  AS portfolio_id,
               p.id,
               p.user_pid,
               p.like_count,
               p.user_nickname,
               p.thumbnail,
               p.title,
               p.content,
               p.created_at,
               p.updated_at,
               pt.tag,
               IF(upl.user_pid IS NULL, FALSE, TRUE) AS is_like
        FROM Portfolio p
                 LEFT JOIN Portfolio_Tags pt ON p.id = pt.portfolio_id
                 LEFT JOIN User_Portfolio_Like upl
                           ON upl.portfolio_id = p.id AND upl.user_pid = #{userPid}
        WHERE p.id = #{portfolioId}
    </select>

    <!--포트폴리오 카드 리스트 반환-->
    <select id="getPortfolioCardList" resultType="PortfolioCardDTO">
        SELECT p.id            AS portfolioId,
               p.user_pid      AS userPid,
               p.like_count    AS likeCount,
               p.thumbnail     AS thumbnail,
               p.title         AS portfolioTitle,
               p.user_nickname AS userNickname,
               p.created_at    AS createdAt
        FROM Portfolio p
        ORDER BY p.created_at DESC
    </select>

    <!--포트폴리오 전체 갯수 반환-->
    <select id="getPortfolioTotalCount" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM Portfolio p
        WHERE 1=1
        <if test="tags != null and !tags.isEmpty()">
            <foreach item="tag" collection="tags" open="AND (" separator="AND" close=")">
                EXISTS (
                SELECT 1
                FROM Portfolio_Tags pt
                WHERE pt.portfolio_id = p.id
                AND pt.tag = #{tag}
                )
            </foreach>
        </if>
        <if test="keyword != null and keyword != ''">
            AND p.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
    </select>


    <!--무한스크롤 - 카드 리스트 반환 + 정렬기준-->
    <select id="getPortfolioCardListWithSortBy" parameterType="map" resultType="PortfolioCardDTO">
        SELECT
        p.id AS portfolioId,
        p.user_pid AS userPid,
        p.like_count AS likeCount,
        p.thumbnail AS thumbnail,
        p.title AS portfolioTitle,
        p.user_nickname AS userNickname,
        p.created_at AS createdAt
        FROM Portfolio p
        WHERE 1=1
        <if test="tags != null and !tags.isEmpty()">
            <foreach item="tag" collection="tags" open="AND (" separator="AND" close=")">
                EXISTS (
                SELECT 1
                FROM Portfolio_Tags pt
                WHERE pt.portfolio_id = p.id
                AND pt.tag = #{tag}
                )
            </foreach>
        </if>
        <if test="keyword != null and keyword != ''">
            AND p.title LIKE CONCAT('%', #{keyword}, '%')
        </if>
        ORDER BY
        <choose>
            <when test="orderBy == 'popular'">
                p.like_count DESC
            </when>
            <otherwise>
                p.created_at DESC
            </otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>


    <!-- 좋아요 여부 확인 -->
    <select id="checkUserLike" resultType="boolean">
        SELECT EXISTS (SELECT 1
                       FROM User_Portfolio_Like
                       WHERE user_pid = #{userPid}
                         AND portfolio_id = #{portfolioId})
    </select>

    <!--좋아요 표시-->
    <insert id="insertLike">
        INSERT INTO User_Portfolio_Like (user_pid, portfolio_id)
        VALUES (#{userPid}, #{portfolioId});
    </insert>

    <!--좋아요 수 증가-->
    <update id="incrementLikeCount">
        UPDATE Portfolio
        SET like_count = IFNULL(like_count, 0) + 1
        WHERE id = #{portfolioId};
    </update>

    <!-- 좋아요 삭제 -->
    <delete id="deleteLike">
        DELETE
        FROM User_Portfolio_Like
        WHERE user_pid = #{userPid}
          AND portfolio_id = #{portfolioId}
    </delete>

    <!-- 좋아요 수 감소 (0 이하로는 떨어지지 않도록 처리) -->
    <update id="decrementLikeCount">
        UPDATE Portfolio
        SET like_count = IF(like_count > 0, like_count - 1, 0)
        WHERE id = #{portfolioId}
    </update>

</mapper>